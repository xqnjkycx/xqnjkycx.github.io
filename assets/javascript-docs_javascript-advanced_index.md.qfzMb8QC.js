import{_ as a,c as t,o as r,U as c}from"./chunks/framework.PFQuerqu.js";const h=JSON.parse('{"title":"JavaScript 进阶","description":"","frontmatter":{},"headers":[],"relativePath":"javascript-docs/javascript-advanced/index.md","filePath":"javascript-docs/javascript-advanced/index.md","lastUpdated":1702437141000}'),i={name:"javascript-docs/javascript-advanced/index.md"},e=c('<h1 id="javascript-进阶" tabindex="-1">JavaScript 进阶 <a class="header-anchor" href="#javascript-进阶" aria-label="Permalink to &quot;JavaScript 进阶&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>任何能够用JavaScript实现的应用系统，最终都必将用JavaScript实现</p></div><p>随着近几年的发展，JavaScript 语言早已逃离出 Web 前端的束缚，广泛应用在各个领域。不但可以用来写前端页面，也可以利用 <code>Node.js</code> 写后端服务，还可以利用 <code>Electron</code> 写桌面应用，亦或是用 <code>React Native</code>、<code>NativeScript</code> 来写移动客户端...</p><h2 id="正确认识-javascript-的学习曲线" tabindex="-1">正确认识 JavaScript 的学习曲线 <a class="header-anchor" href="#正确认识-javascript-的学习曲线" aria-label="Permalink to &quot;正确认识 JavaScript 的学习曲线&quot;">​</a></h2><p>JavaScript 是简单的，它没有真正意义上的类 <strong>（JavaScript 中的类仅仅是函数的语法糖而已）</strong>、没有范型 <strong>（TypeScript 才引入了一定的范型）</strong>、不需要编译即可运行 <strong>（动态语言，解释执行）</strong>，更没有多线程 <strong>（只能依赖各种 Worker 来模拟）</strong>。同时 JavaScript 也是复杂的，它的原型链上和属性描述符上的设计，都不同于其他语言。</p><p>加上随着 ECMAScript 规范的快速迭代，相当一部分陈旧的知识已经被淘汰，但考虑到兼容性，浏览器环境仍然保留了对大部分旧 API 的支持，新旧 API 的共存也让初学者更加困惑。</p><p>在以上种种因素的作用下，积累了大量的边界知识和陷阱，只需要阅读一段代码，有经验的人一眼就能看出编写者的水平高低。</p><p>如何评价一个人是否具备了一定的高级 JavaScript 能力呢？个人的总结如下：</p><ul><li>知道常用 API 的能力范围和不足，避免或减少写出有缺陷的代码；</li><li>知道相关联的对象或 API 之间的联系，灵活拓展非现成的能力；</li><li>知道最新的语法和API，能够在适当的场景优化代码质量和运行效率；</li></ul><h2 id="如何快速学习-javascript" tabindex="-1">如何快速学习 JavaScript <a class="header-anchor" href="#如何快速学习-javascript" aria-label="Permalink to &quot;如何快速学习 JavaScript&quot;">​</a></h2><p>实际上大部分的 ECMAScript 的规范细节时不需要过度关心的，而且平时的业务也很难遇得到，这里总结日常<strong>使用频率更高</strong>，<strong>犯错概率更高以及忽略概率更高</strong>的知识，分为 三个阶段 去讲解：</p><ul><li>基础：学习 JavaScript 基础类型的高级知识点，这是日常最常使用的知识，我们要学习到不同类型数据的结构、操作 API，梳理不同需求下更推荐的编码方式。</li><li>进阶：学习 JavaScript 的重要对象和概念，比如原型链、Set、Map、Reflect、Proxy，能够让我们在实现一些高级功能时更具选择性。</li><li>高级篇：学习 JavaScript 语言层面的概念和操作，比如迭代器、模块化、异步，通过它们我们可以高效优化编写出的代码。</li></ul>',12),o=[e];function p(s,d,n,l,v,S){return r(),t("div",null,o)}const J=a(i,[["render",p]]);export{h as __pageData,J as default};
