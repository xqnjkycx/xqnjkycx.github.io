import{_ as s,o as a,c as o,Q as l}from"./chunks/framework.6d94f49f.js";const n="/assets/第一个红色shader.e4e1a593.png",p="/assets/彩色旗.md.49e8f44f.png",g=JSON.parse('{"title":"相信Shader！","description":"","frontmatter":{},"headers":[],"relativePath":"webgl-docs/shader/学习shader的准备工作.md","filePath":"webgl-docs/shader/学习shader的准备工作.md","lastUpdated":1700481633000}'),e={name:"webgl-docs/shader/学习shader的准备工作.md"},r=l(`<h1 id="相信shader" tabindex="-1">相信Shader！ <a class="header-anchor" href="#相信shader" aria-label="Permalink to &quot;相信Shader！&quot;">​</a></h1><p>在正式入门Shader之前，请先准备好以下的几类工具！</p><h2 id="shader开发环境集成" tabindex="-1">Shader开发环境集成 <a class="header-anchor" href="#shader开发环境集成" aria-label="Permalink to &quot;Shader开发环境集成&quot;">​</a></h2><p>Shader的开发环境主要有 2 种：网站和编辑器。选哪一种其实都可以，但我个人偏向于用编辑器进行开发。</p><p>网站编辑器：<a href="https://www.shadertoy.com/" target="_blank" rel="noreferrer">shader的网站编辑器</a> 😅需要翻墙哦～</p><p>我反正使用的是VsCode，因为需要额外安装一些插件来辅助Shader的开发。</p><ul><li>Shader 语言支持 保证我们的Shader文件的代码需要有完整的高亮支持。在插件商场中搜索<a href="https://marketplace.visualstudio.com/items?itemName=slevesque.shader" target="_blank" rel="noreferrer">Shader languages support for VS Code</a></li><li>Shader 实时预览 这个可以保证能够实时预览Shader的渲染结果。插件商场中搜索<a href="https://marketplace.visualstudio.com/items?itemName=stevensona.shader-toy" target="_blank" rel="noreferrer">Shader Toy</a></li><li>HTML 实时预览 在后面笔记里，我们将会把Shader代码直接作为字符串写入html文件，因此需要一个能直接预览html文件渲染结果的插件。<a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.live-server" target="_blank" rel="noreferrer">Live Preview</a></li></ul><p>OK，这三个就是最重要的了，还有一些可选的插件，可以自己去插件商场中进行检索安装～😘</p><hr><h2 id="实现第一个shader" tabindex="-1">实现第一个Shader <a class="header-anchor" href="#实现第一个shader" aria-label="Permalink to &quot;实现第一个Shader&quot;">​</a></h2><p>创建一个文件名为<code>first-shader.glsl</code>文件。</p><p>编写Shader主体。</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mainImage</span><span style="color:#E1E4E8;">(out vec4 </span><span style="color:#FFAB70;">fragColor</span><span style="color:#E1E4E8;">,in vec2 </span><span style="color:#FFAB70;">fragCoord</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mainImage</span><span style="color:#24292E;">(out vec4 </span><span style="color:#E36209;">fragColor</span><span style="color:#24292E;">,in vec2 </span><span style="color:#E36209;">fragCoord</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中，<code>fragColor</code>是一个四维向量，它代表了画布中点的颜色。而<code>fragCoord</code>是一个二维变量，它代表了画布中的点的坐标。</p><div class="tip custom-block"><p class="custom-block-title">小提示</p><p>从这篇笔记到《顶点着色器》笔记之前，都是在Shadertoy的环境下进行的，主函数main需写成mainImage，输出颜色gl_FragColor需写成fragColor，输入坐标gl_FragCoord需写成fragCoord，顶点着色器时会改变写法。</p></div><p>OK，现在直接向屏幕随便输出一个红色</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mainImage</span><span style="color:#E1E4E8;">(out vec4 </span><span style="color:#FFAB70;">fragColor</span><span style="color:#E1E4E8;">,in vec2 </span><span style="color:#FFAB70;">fragCoord</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    vec3 color </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0.</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0.</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    fragColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">vec4</span><span style="color:#E1E4E8;">(color,</span><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;">);   </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mainImage</span><span style="color:#24292E;">(out vec4 </span><span style="color:#E36209;">fragColor</span><span style="color:#24292E;">,in vec2 </span><span style="color:#E36209;">fragCoord</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    vec3 color </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1.</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    fragColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vec4</span><span style="color:#24292E;">(color,</span><span style="color:#005CC5;">1.</span><span style="color:#24292E;">);   </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里定义了一个名为<code>color</code>的 3 维变量，要将它的值设置为红色，红色的<code>RGB</code>颜色值为<code>(255,0,0)</code>，在GLSL中，我们需要先将颜色原先的值进行归一化操作（除以<code>255</code>）后才能将它正确地输出，因此将红色的值归一化后我们就得到了<code>(1,0,0)</code>这个值，将它转换为 3 维变量<code>vec3(1.,0.,0.)</code>赋给<code>color</code>变量。最后我们给输出颜色<code>fragColor</code>赋值一个 4 维变量，前 3 维就是<code>color</code>这个颜色变量，最后一维是透明度，由于纯红色并不透明，直接将其设为 1 即可。</p><p>按下<code>Ctrl+Shift+P</code>，输入<code>Shader Toy: Show GLSL Preview</code>，点击即可预览我们的结果，如果一切顺利的话，你应该能看到画面是一片红色。</p><p><img src="`+n+`" alt="第一个红色shader"></p><p>现在来尝试一次性输出四种变量颜色</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">vec3</span><span style="color:#E1E4E8;"> color1</span><span style="color:#F97583;">=vec3</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0.</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">vec3</span><span style="color:#E1E4E8;"> color2</span><span style="color:#F97583;">=vec3</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0.</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">vec3</span><span style="color:#E1E4E8;"> color3</span><span style="color:#F97583;">=vec3</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0.</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">vec3</span><span style="color:#E1E4E8;"> color4</span><span style="color:#F97583;">=vec3</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0.</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0.</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">vec3</span><span style="color:#24292E;"> color1</span><span style="color:#D73A49;">=vec3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1.</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1.</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">vec3</span><span style="color:#24292E;"> color2</span><span style="color:#D73A49;">=vec3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1.</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1.</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">vec3</span><span style="color:#24292E;"> color3</span><span style="color:#D73A49;">=vec3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1.</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">vec3</span><span style="color:#24292E;"> color4</span><span style="color:#D73A49;">=vec3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1.</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.</span><span style="color:#24292E;">);</span></span></code></pre></div><p>这里我们就要用到<code>fragCoord</code>变量了，它代表了输入的像素坐标，有 2 个维度<code>xy</code>，它们的大小取决于画面本身的大小。假设我们画面当前的大小为<code>1536x864</code>，那么每一个像素的<code>fragCoord</code>的x坐标值将会分布在<code>(0,1536)</code>之间，y坐标值则分布在<code>(0,864)</code>之间。</p><p>在当前的Shader开发环境内，还有个内置的变量<code>iResolution</code>，代表了画面整体的大小，使用它时一般会取它的xy维度。</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(fragCoord.x</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">iResolution.x</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">.25</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    fragColor</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">vec4</span><span style="color:#E1E4E8;">(color1,</span><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(fragCoord.x</span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;">iResolution.x</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">.25</span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;">fragCoord.x</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">iResolution.x</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">.5</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    fragColor</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">vec4</span><span style="color:#E1E4E8;">(color2,</span><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(fragCoord.x</span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;">iResolution.x</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">.5</span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;">fragCoord.x</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">iResolution.x</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">.75</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    fragColor</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">vec4</span><span style="color:#E1E4E8;">(color3,</span><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    fragColor</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">vec4</span><span style="color:#E1E4E8;">(color4,</span><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(fragCoord.x</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">iResolution.x</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">.25</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    fragColor</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">vec4</span><span style="color:#24292E;">(color1,</span><span style="color:#005CC5;">1.</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(fragCoord.x</span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;">iResolution.x</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">.25</span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;">fragCoord.x</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">iResolution.x</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">.5</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    fragColor</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">vec4</span><span style="color:#24292E;">(color2,</span><span style="color:#005CC5;">1.</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(fragCoord.x</span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;">iResolution.x</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">.5</span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;">fragCoord.x</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">iResolution.x</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">.75</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    fragColor</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">vec4</span><span style="color:#24292E;">(color3,</span><span style="color:#005CC5;">1.</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    fragColor</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">vec4</span><span style="color:#24292E;">(color4,</span><span style="color:#005CC5;">1.</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><img src="`+p+'" alt="彩色棋"></p><p>大功告成！🌹这就是Shader的一个核心：<strong>根据像素的坐标来计算出对应的颜色！</strong></p>',27),c=[r];function t(y,E,d,i,F,C){return a(),o("div",null,c)}const v=s(e,[["render",t]]);export{g as __pageData,v as default};
