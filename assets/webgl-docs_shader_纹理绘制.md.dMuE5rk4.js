import{_ as s,c as i,o as a,U as n}from"./chunks/framework.cPOleGLh.js";const h="/assets/纹理图片.5uUHkbO2.png",l="/assets/扭曲纹理图片.Uo5rHKDZ.png",p="/assets/sinx1050.K3jiJCfe.png",u=JSON.parse('{"title":"Shader界的重量级角色 纹理","description":"","frontmatter":{},"headers":[],"relativePath":"webgl-docs/shader/纹理绘制.md","filePath":"webgl-docs/shader/纹理绘制.md","lastUpdated":1703605975000}'),t={name:"webgl-docs/shader/纹理绘制.md"},k=n(`<h1 id="shader界的重量级角色-纹理" tabindex="-1">Shader界的重量级角色 纹理 <a class="header-anchor" href="#shader界的重量级角色-纹理" aria-label="Permalink to &quot;Shader界的重量级角色 纹理&quot;">​</a></h1><p>在<code>HTML</code>中，除了用的最多的<code>div</code>标签外，最常用的标签应该是<code>img</code>。</p><p>而在<code>Shader</code>里，没有<code>img</code>标签，而是换成了<strong>纹理</strong>。</p><h2 id="启动模版" tabindex="-1">启动模版 <a class="header-anchor" href="#启动模版" aria-label="Permalink to &quot;启动模版&quot;">​</a></h2><p>新建一个<code>.glsl</code>文件，并初始化代码</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mainImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(out vec4 </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fragColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,in vec2 </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fragCoord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vec2 uv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fragCoord</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iResolution.xy;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fragColor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vec4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uv,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="引入纹理" tabindex="-1">引入纹理 <a class="header-anchor" href="#引入纹理" aria-label="Permalink to &quot;引入纹理&quot;">​</a></h2><p>为了引入纹理，需要处理纹理的<code>URL</code>链接，这里提供一张图片的图片链接 :</p><p><a href="https://s2.loli.net/2023/09/10/QozT59R6KsYmb3q.jpg" target="_blank" rel="noreferrer">我是用于引入纹理的图片链接</a></p><p>它长成这个样子：</p><p><img src="https://s2.loli.net/2023/09/10/QozT59R6KsYmb3q.jpg" alt="我是用于引入纹理的图片链接"></p><p>如果在<code>GLSL</code>文件内编写Shader，那么需要这么引入纹理</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#iChannel </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://s2.loli.net/2023/09/10/QozT59R6KsYmb3q.jpg&quot;</span></span></code></pre></div><p>引入纹理后，为了将它显示在屏幕上，需要对它进行采样操作。<code>GLSL</code>内置了一个采样函数<code>texture</code>，可以直接用它将纹理给采样出来。</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#iChannel0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://s2.loli.net/2023/09/10/QozT59R6KsYmb3q.jpg&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mainImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(out vec4 </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fragColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,in vec2 </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fragCoord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vec2 uv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fragCoord</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iResolution.xy;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vec3 tex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> texture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iChannel0,uv).xyz;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fragColor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vec4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tex,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>采样函数<code>texture</code>接受2个参数：第一个是纹理<code>iChannel0</code>，第二个是uv坐标，并且取它的前3维度（暂不考虑纹理的透明度），最后用变量<code>vec4(tex,1.)</code>输出到屏幕上。</p><p>最后可以看到这个结果： <img src="`+h+`" alt="纹理图片"></p><p>将纹理渲染到屏幕上后，就可以进行一些操作了～😘</p><h2 id="扭曲" tabindex="-1">扭曲 <a class="header-anchor" href="#扭曲" aria-label="Permalink to &quot;扭曲&quot;">​</a></h2><p>第一个操作是扭曲，通过改变纹理的uv坐标可以扭曲整个图片的形状。</p><p>这时，创建一个叫<code>distort</code>的扭曲函数。给扭曲函数内的uv坐标的<code>x</code>分量加上<code>sin</code>函数处理过的<code>y</code>分量。</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">vec2</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> distort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vec2 </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    p.x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p.y);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>可以看到图片被极其夸张地扭曲形状了，扭曲程度过大，需要对扭曲量进行调整。 <img src="`+l+'" alt="扭曲图片"></p><h3 id="调试函数" tabindex="-1">调试函数 <a class="header-anchor" href="#调试函数" aria-label="Permalink to &quot;调试函数&quot;">​</a></h3><p>这里推荐一个网站 ———— <a href="https://graphtoy.com/" target="_blank" rel="noreferrer">Graphtoy</a>,它也是<code>iq</code>创建的，用它能很方便地对<code>Shader</code>的函数进行可视化调试。</p><p><img src="'+p+`" alt="sin(x*10)/50"></p><p>现在调试扭曲函数如下代码：</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">vec2</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> distort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vec2 </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    p.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p.y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iTime)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>目前的扭曲由于加入了<code>iTime</code>,可以看到图片正在动态的扭曲。</p><h2 id="转场" tabindex="-1">转场 <a class="header-anchor" href="#转场" aria-label="Permalink to &quot;转场&quot;">​</a></h2><p>转场意味着，可以将一张纹理转变成另一张纹理。</p><p>这里需要<a href="https://s2.loli.net/2023/09/10/Jb8mIhZMBElPiuC.jpg" target="_blank" rel="noreferrer">第二张图片</a>，这里直接提供。</p><p>它长这个样子： <img src="https://s2.loli.net/2023/09/10/Jb8mIhZMBElPiuC.jpg" alt="image"></p><p>同理，需要在<code>GLSL</code>的上方加入这样的代码</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#iChannel1 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://s2.loli.net/2023/09/10/Jb8mIhZMBElPiuC.jpg&quot;</span></span></code></pre></div><p>两张纹理都引入后,也需要创建两个采样函数，用于将2个纹理都采样出来。</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">vec4</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getFromColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vec2 </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">uv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> texture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iChannel0,uv);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">vec4</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getToColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vec2 </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">uv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> texture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iChannel1,uv);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>然后可以得到一个转场函数<code>transition</code></p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">vec4</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vec2 </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">uv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> progress</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iMouse.x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iResolution.x;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFromColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uv),</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getToColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uv),progress);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>转场函数将2张纹理通过<code>mix</code>函数混合了起来，并且混合程度是用户鼠标归一化的<code>x</code>轴位置。</p><p>在主函数<code>mainImage</code>中调用转场函数。</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mainImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(out vec4 </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fragColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,in vec2 </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fragCoord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vec2 uv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fragCoord</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iResolution.xy;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vec4 col</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uv);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fragColor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">col;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>左右拖拽鼠标，就能看到最基本的转场</p><h3 id="滑动转场" tabindex="-1">滑动转场 <a class="header-anchor" href="#滑动转场" aria-label="Permalink to &quot;滑动转场&quot;">​</a></h3><p>使用<code>step</code>函数，可以实现滑动转场</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">vec4</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vec2 </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">uv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> progress</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iMouse.x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iResolution.x;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFromColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uv),</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getToColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uv),</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">step</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(progress,uv.x));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>将画布分为2个部分，位于鼠标左边的部分和位于鼠标右边的部分，左半部分的<code>uv.x</code>是小于<code>progress</code>的，<code>step</code>函数会返回0，混合程度则返回1，表示第二张图；右半部分的<code>uv.x</code>是大于<code>progress</code>的，<code>step</code>函数会返回1，混合程度则返回0，表示第一张图片。</p><h3 id="遮罩转场" tabindex="-1">遮罩转场 <a class="header-anchor" href="#遮罩转场" aria-label="Permalink to &quot;遮罩转场&quot;">​</a></h3><p>在<code>progress</code>变量1的下方新增一个<code>ratio</code>变量，表示画布的比例。</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ratio </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iResolution.x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iResolution.y;</span></span></code></pre></div><p>这里需要使用到使用到之前的圆形<code>SDF</code>函数，将其复制过来</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 圆形sdf</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sdfCircle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vec2 </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在转场函数中，用上一章所学的知识画一个圆形的遮罩，半径取<code>progress</code>，不够大的话乘上一个数(根号2)，然后将这个遮罩取反<code>1.-c</code>作为混合程度。</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">vec4</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vec2 </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">uv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> progress</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iMouse.x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iResolution.x;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ratio</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iResolution.x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iResolution.y;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vec2 p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uv;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    p.x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ratio;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sdfCircle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p,progress</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">smoothstep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.02</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,d);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFromColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uv),</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getToColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uv),</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mainImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(out vec4 </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fragColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,in vec2 </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fragCoord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vec2 uv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fragCoord</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iResolution.xy;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vec4 col</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uv);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fragColor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">col;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>拖动鼠标位置，即可看到转场效果。</p><h3 id="置换转场" tabindex="-1">置换转场 <a class="header-anchor" href="#置换转场" aria-label="Permalink to &quot;置换转场&quot;">​</a></h3><p>除了可以用纹理本身来扭曲纹理的uv坐标，这样的操作称为“置换”，用来扭曲的纹理称为“置换纹理”</p><p>先要找到一张“置换纹理”，通常一般是在<a href="https://3dtextures.me/" target="_blank" rel="noreferrer">3d textures</a>上找到的，选用一张<a href="https://3dtextures.me/2022/04/27/gravel-001/" target="_blank" rel="noreferrer">沙砾的纹理</a>，然后在下面的Shader中引入它。</p><h2 id="更多效果" tabindex="-1">更多效果 <a class="header-anchor" href="#更多效果" aria-label="Permalink to &quot;更多效果&quot;">​</a></h2><p>如果想要拥有更多的转场特效，推荐使用<code>GitHub</code>上的这个库<a href="https://github.com/gl-transitions/gl-transitions" target="_blank" rel="noreferrer">gl-transitions</a></p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">vec4</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vec2 </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">uv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> progress</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iMouse.x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iResolution.x;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ratio</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iResolution.x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iResolution.y;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vec2 dispVec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">texture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iChannel2,uv).xy;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vec2 uv1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vec2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uv.x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dispVec.x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">progress,uv.y);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vec2 uv2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vec2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uv.x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dispVec.x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">progress),uv.y);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFromColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uv1),</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getToColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uv2),progress);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mainImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(out vec4 </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fragColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,in vec2 </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fragCoord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vec2 uv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fragCoord</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iResolution.xy;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vec4 col</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uv);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fragColor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">col;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>将置换纹理采样成<code>dispVec</code>，提取2个维度<code>xy</code></p><p>对于第一张图片，以原uv为基础，创建新的uv变量<code>uv1</code>，在上一章中说过，往正方向（右边）移动的话并非加上，而是减去，因此给uv的<code>x</code>坐标减去<code>x</code>轴上的偏移量<code>dispVec.x</code>，并给它乘上<code>progress</code>，让它随鼠标的位置变化而变化的，第二张图片同理也是这么操作的，只不过要把方向取反，并且鼠标位置也要取反，变成<code>1.-progress</code>。最后将<code>getFromColor</code>和<code>getToColor</code>的参数分别设置成新的uv坐标。</p>`,63),e=[k];function E(r,d,g,o,c,y){return a(),i("div",null,e)}const v=s(t,[["render",E]]);export{u as __pageData,v as default};
