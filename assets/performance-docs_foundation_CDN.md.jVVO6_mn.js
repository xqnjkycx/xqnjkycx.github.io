import{_ as o,c as t,o as a,U as n}from"./chunks/framework.qUHj8-gn.js";const r="/assets/性能优化之CDN.ux9PRDqA.png",h=JSON.parse('{"title":"CDN","description":"","frontmatter":{},"headers":[],"relativePath":"performance-docs/foundation/CDN.md","filePath":"performance-docs/foundation/CDN.md","lastUpdated":1709557315000}'),e={name:"performance-docs/foundation/CDN.md"},i=n('<h1 id="cdn" tabindex="-1">CDN <a class="header-anchor" href="#cdn" aria-label="Permalink to &quot;CDN&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">基本概念</p><p>CDN (Content Delivery NetWork，即内容分发网络) 指的是一组分布在各个地区的服务器。这些服务器存储着数据的副本，因此服务器可以根据哪些服务器与用户距离最近，来满足数据的请求。</p><p>CDN提供快速服务，较少受到高流量影响。</p></div><h2 id="为什么使用cdn" tabindex="-1">为什么使用CDN <a class="header-anchor" href="#为什么使用cdn" aria-label="Permalink to &quot;为什么使用CDN&quot;">​</a></h2><p>像前文类似的缓存，本地存储带来的提升，都是需要在<strong>获取到资源并把它们存起来</strong>这件事情发生之后的优化。也就是说在首次请求资源时，CDN可以提升首次请求的响应能力。</p><p>其实现思路：通过在网络各处放置<strong>节点服务器</strong>所构成的在现有的互联网基础之上的一层<strong>智能虚拟网络</strong>，CDN系统能够实时地根据网络流量和各节点的<strong>连接和负载状况</strong>以及到用户的距离和响应时间等综合信息将用户的请求重新<strong>导向离用户最近的服务节点</strong>上，加快访问速度</p><h2 id="cdn的基本工作流程" tabindex="-1">CDN的基本工作流程 <a class="header-anchor" href="#cdn的基本工作流程" aria-label="Permalink to &quot;CDN的基本工作流程&quot;">​</a></h2><p>如果<strong>不使用CDN</strong>，其情况为：</p><ul><li>用户在自己的浏览器中输入要访问的网站域名</li><li>浏览器向 本地DNS服务器 请求对该域名的解析</li><li>本地DNS服务器中如果缓存有这个域名的解析结果，则直接响应用户的解析请求</li><li>本地DNS服务器中如果没有关于这个域名的解析结果的缓存，则以递归方式向整个DNS系统请求解析，获得应答后将结果反馈给浏览器</li><li>浏览器得到域名解析结果，就是该域名相应的服务设备的 IP地址</li><li>浏览器向服务器请求内容</li><li>服务器将用户请求内容传送给浏览器</li></ul><p>如果<strong>使用了CDN</strong>时，DNS服务器根据用户IP地址，将域名解析成相应节点的缓存服务器IP地址，从而实现用户的就近访问。当时用CDN服务的设备，只需要将其域名解析权交给CDN的全局负载均衡设备，将需要分发的内容注入CDN即可。</p><ul><li>当用户点击网站页面上的内容URL，经过<strong>本地</strong>DNS系统解析，DNS 系统会最终将域名的解析权交给 <code>CNAME</code> 指向的 CDN 专用 DNS 服务器</li><li>CDN 的 DNS 服务器将 CDN 的<strong>全局负载均衡设备</strong> <code>IP</code> 地址返回用户。</li><li>用户向 CDN 的全局负载均衡设备发起内容 URL 访问请求</li><li>CDN 全局负载均衡设备根据用户 IP 地址，以及用户请求的内容URL，选择一台用户所属区域的区域负载均衡设备，告诉用户向这台设备发起请求</li><li>基于以下这些条件的综合分析之后，区域负载均衡设备会向全局负载均衡设备返回一台缓存服务器的IP地址： <ul><li>1.根据用户 IP 地址，判断哪一台服务器距用户最近</li><li>2.根据用户所请求的 URL 中携带的内容名称，判断哪一台服务器上有用户所需内容</li><li>3.查询各个服务器当前的负载情况，判断哪一台服务器尚有服务能力</li></ul></li><li>全局负载均衡设备把服务器的 IP 地址返回给用户</li><li>用户向缓存服务器发起请求，缓存服务器响应用户请求，将用户所需内容传送到用户终端。如果这台缓存服务器上并没有用户想要的内容，而区域均衡设备依然将它分配给了用户，那么这台服务器就要向它的上一级缓存服务器请求内容，直至追溯到网站的源服务器将内容拉到本地。</li></ul><h2 id="cdn核心功能" tabindex="-1">CDN核心功能 <a class="header-anchor" href="#cdn核心功能" aria-label="Permalink to &quot;CDN核心功能&quot;">​</a></h2><p>当一位用户向服务器A请求资源时，也许在网络带宽小，用户访问量大的情况下，A服务器并不能给用户非常快的响应速度。那么可以将资源copy一份放到服务器B里，当用户请求资源时，就近拿去服务器B的资源。</p><p>如果服务器B并没有copy这份资源，那么就回再向服务器A请求资源。</p><p>那么服务器B就充当了CDN的角色，CDN的核心有两个点，分别是<strong>缓存</strong>和<strong>回源</strong>。<strong>缓存</strong>意味着把资源Copy到CDN服务器上，<strong>回源</strong>就代表CDN服务器发现匹配不到资源(一般来说，缓存的数据过期了)，然后向跟服务器去获取资源这个过程。</p><h2 id="cdn的实际应用" tabindex="-1">CDN的实际应用 <a class="header-anchor" href="#cdn的实际应用" aria-label="Permalink to &quot;CDN的实际应用&quot;">​</a></h2><p><strong>CDN</strong>一般用于存放静态资源。上文的“根服务器”本质上是业务服务器，它的核心任务在于<strong>生成动态页面或返回非纯静态页面（JSP,服务端渲染出的HTML页面）</strong>。像“静态资源”，就是JS，CSS，图片等不需要业务服务器进行计算获得就可以得到的资源。</p><p>静态资源本身具有访问频率高，承接流量大的特点，因此静态资源加载速度始终是前端性能的一个非常关键的指标。CDN是静态资源提速的重要手段，更是一种规定。</p><p>比如在掘金上，可以看到一些静态资源，比如“图片”就是CDN请求来的</p><p><img src="'+r+'" alt="image"></p>',19),l=[i];function s(c,d,N,D,p,C){return a(),t("div",null,l)}const _=o(e,[["render",s]]);export{h as __pageData,_ as default};
