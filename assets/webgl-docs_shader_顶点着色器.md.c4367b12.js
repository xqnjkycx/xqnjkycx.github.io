import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.6d94f49f.js";const o="/assets/kokomi-白球.b3dff61b.png",p="/assets/自定义材质.7ff6f0fe.png",v=JSON.parse('{"title":"顶点着色器","description":"","frontmatter":{},"headers":[],"relativePath":"webgl-docs/shader/顶点着色器.md","filePath":"webgl-docs/shader/顶点着色器.md","lastUpdated":1702437141000}'),e={name:"webgl-docs/shader/顶点着色器.md"},c=l(`<h1 id="顶点着色器" tabindex="-1">顶点着色器 <a class="header-anchor" href="#顶点着色器" aria-label="Permalink to &quot;顶点着色器&quot;">​</a></h1><p>如果收到过巧克力🍫礼盒，可以知道巧克力盒有各种各样的巧克力，它们在颜色，图案，形状上都有所不同：既有白色的，波纹状的，方形的，咖啡色的，条纹状的，圆形的巧克力...</p><p>如果说片元着色器决定了一个巧克力的颜色和图案，那么<strong>顶点着色器</strong>就决定了巧克力的形状。</p><h2 id="_3d世界" tabindex="-1">3D世界 <a class="header-anchor" href="#_3d世界" aria-label="Permalink to &quot;3D世界&quot;">​</a></h2><p>在学习顶点着色器之前，需要把2d世界转换为3d世界。</p><p>这里要引入一个第三方库<a href="https://github.com/alphardex/kokomi.js" target="_blank" rel="noreferrer">kokomi.js</a>。</p><p>这里简单的介绍一下它：<code>kokomi.js</code>是一个基于<a href="https://github.com/mrdoob/three.js" target="_blank" rel="noreferrer">three.js</a>二次封装的<code>3D</code>框架，里面封装了很多实用的函数和类，并且支持组件化地编写<code>3D</code>物体，可以把它当作是<code>three.js</code>界的<code>jQuery</code>！</p><p>接下来，可以使用<code>kokomi.js</code>来搭建一个<code>3D</code>世界。</p><p>新建一个<code>kokomi.html</code>文件，重置浏览器背景色为黑色</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">margin</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">background</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">black</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">body</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">margin</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">background</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">black</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>定义画布的容器标签，设置<code>id</code>为<code>sketch</code></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;sketch&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;sketch&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>同时引入<code>kokomi.js</code>和<code>three.js</code></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;https://unpkg.com/kokomi.js@1.9.78/build/kokomi.umd.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;https://unpkg.com/three@0.154.0/build/three.min.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;https://unpkg.com/kokomi.js@1.9.78/build/kokomi.umd.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;https://unpkg.com/three@0.154.0/build/three.min.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>创建一个空白的<code>3d</code>画布</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Sketch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">kokomi</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Base</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sketch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Sketch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#sketch&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        sketch.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Sketch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">kokomi</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Base</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sketch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Sketch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#sketch&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        sketch.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p><code>Sketch</code>所继承的<code>kokomi.Base</code>类为开发者自动创建了场景<code>scene</code>，渲染器<code>renderer</code>，相机<code>camera</code>，动画循环以及其他的一些组件，然后在<code>create</code>函数里继续编写代码。</p><p>现在设置下相机的初始位置，并且引入轨道控制组件<code>kokomi.OrbitControls</code>，这个组件使开发者能够通过拖拽鼠标来自由地观察整个场景。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.camera.position.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> kokomi.</span><span style="color:#B392F0;">OrbitControls</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.camera.position.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> kokomi.</span><span style="color:#6F42C1;">OrbitControls</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span></code></pre></div><p>这样就搭建了一个最简单的<code>3d</code>画布，里面暂时空空如也。</p><h2 id="网格" tabindex="-1">网格 <a class="header-anchor" href="#网格" aria-label="Permalink to &quot;网格&quot;">​</a></h2><p>现在可以创建第一个<code>3d</code>物体，在<code>three.js</code>中，<code>3D</code>物体被称作网格<code>Mesh</code>，而网格是由两部分组成的：</p><ul><li>几何体<code>geometry</code>：定义了<code>3D</code>物体的形状</li><li>材质<code>meterial</code>：定义了<code>3D</code> 现在可以试着创建一个白色的球体：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Sketch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">kokomi</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Base</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.camera.position.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> kokomi.</span><span style="color:#B392F0;">OrbitControls</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">geomotry</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">SphereGeometry</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">64</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">64</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">material</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">MeshBasicMaterial</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">                    color:</span><span style="color:#9ECBFF;">&quot;#ffffff&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                 })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mesh</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Mesh</span><span style="color:#E1E4E8;">(geomotry,material);</span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.scene.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(mesh)</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sketch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Sketch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#sketch&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        sketch.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Sketch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">kokomi</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Base</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.camera.position.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> kokomi.</span><span style="color:#6F42C1;">OrbitControls</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">geomotry</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">SphereGeometry</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">64</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">64</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">material</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">MeshBasicMaterial</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">                    color:</span><span style="color:#032F62;">&quot;#ffffff&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                 })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mesh</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Mesh</span><span style="color:#24292E;">(geomotry,material);</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.scene.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(mesh)</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sketch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Sketch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#sketch&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        sketch.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">()</span></span></code></pre></div><p><a href="https://threejs.org/docs/#api/en/geometries/SphereGeometry" target="_blank" rel="noreferrer">SphereGeometry</a>指定了几何体为球体，半径为2，宽高的细分皆为64；<a href="https://threejs.org/docs/#api/en/materials/MeshBasicMaterial" target="_blank" rel="noreferrer">MeshBasicMaterial</a>指定了材质为基础材质（没有光照，只有颜色或纹理的材质），颜色为白色。效果如下： <img src="`+o+`" alt="kokomi-白球"></p><p>对于<code>three.js</code>，它是一个<code>webGL</code>封装程度非常高的框架。刚刚用到的基础材质，包括<code>three.js</code>所有的内置材质都是通过Shader来实现的。</p><p>尽管<code>three.js</code>内置材质本身非常好用，但是也有局限性的，如果想实现一些自定义的效果，只用内置材质是难以实现的。实际上，有一种材质能够完完全全地自定义Shader。</p><h2 id="自定义shader" tabindex="-1">自定义Shader <a class="header-anchor" href="#自定义shader" aria-label="Permalink to &quot;自定义Shader&quot;">​</a></h2><p><a href="https://threejs.org/docs/#api/en/materials/ShaderMaterial" target="_blank" rel="noreferrer">ShaderMaterial</a><strong>满足了开发者能够自定义顶点着色器和片元着色器</strong>。</p><p>将刚刚场景内的球体的材质替换为<code>ShaderMaterial</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">material</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">ShaderMaterial</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">material</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">ShaderMaterial</span><span style="color:#24292E;">()</span></span></code></pre></div><p>向<code>THREE.ShaderMaterial</code>内传入<code>glsl</code>代码:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">material</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">ShaderMaterial</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            vertexShader:</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">                void main(){</span></span>
<span class="line"><span style="color:#9ECBFF;">                    vec4 modelPosition=modelMatrix*vec4(position,1.);</span></span>
<span class="line"><span style="color:#9ECBFF;">                    vec4 viewPosition=viewMatrix*modelPosition;</span></span>
<span class="line"><span style="color:#9ECBFF;">                    vec4 projectedPosition=projectionMatrix*viewPosition;</span></span>
<span class="line"><span style="color:#9ECBFF;">                    gl_Position=projectedPosition;</span></span>
<span class="line"><span style="color:#9ECBFF;">                }</span></span>
<span class="line"><span style="color:#9ECBFF;">            \`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            fragmentShader:</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">                void main(){</span></span>
<span class="line"><span style="color:#9ECBFF;">                    vec3 color = vec3(1.,0.,0.);</span></span>
<span class="line"><span style="color:#9ECBFF;">                    gl_FragColor=vec4(color,1.);</span></span>
<span class="line"><span style="color:#9ECBFF;">                }</span></span>
<span class="line"><span style="color:#9ECBFF;">                \`</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">material</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">ShaderMaterial</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">            vertexShader:</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">                void main(){</span></span>
<span class="line"><span style="color:#032F62;">                    vec4 modelPosition=modelMatrix*vec4(position,1.);</span></span>
<span class="line"><span style="color:#032F62;">                    vec4 viewPosition=viewMatrix*modelPosition;</span></span>
<span class="line"><span style="color:#032F62;">                    vec4 projectedPosition=projectionMatrix*viewPosition;</span></span>
<span class="line"><span style="color:#032F62;">                    gl_Position=projectedPosition;</span></span>
<span class="line"><span style="color:#032F62;">                }</span></span>
<span class="line"><span style="color:#032F62;">            \`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            fragmentShader:</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">                void main(){</span></span>
<span class="line"><span style="color:#032F62;">                    vec3 color = vec3(1.,0.,0.);</span></span>
<span class="line"><span style="color:#032F62;">                    gl_FragColor=vec4(color,1.);</span></span>
<span class="line"><span style="color:#032F62;">                }</span></span>
<span class="line"><span style="color:#032F62;">                \`</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span></code></pre></div><p>效果如下： <img src="`+p+`" alt="自定义材质"><code>fragmentShader</code>是<strong>片元着色器</strong>，里面的代码就是之前的Shader代码。（略微的差别是<code>mainImage</code>变成了<code>main</code>且参数消失了，<code>fragColor</code>变成了<code>gl_FragColor</code>。）</p><p><code>vertexShader</code>是<strong>顶点着色器</strong>，它代表的意思是：一个叫<code>position</code>的变量，经过了3个矩阵的变换，被赋给了<code>gl_Position</code>，这三个矩阵被称为<code>MVP</code>矩阵，分别代表了<strong>模型</strong>，<strong>视图</strong>，<strong>投影</strong>。</p><p>具体含义可以参考<a href="https://zhuanlan.zhihu.com/p/343532009" target="_blank" rel="noreferrer">从零开始学图形学：MVP Transformation</a></p><p>其实，这三个矩阵的其中2个矩阵（模型和视图）可以合并为一个矩阵<code>modelViewMatrix</code>，这样就可以把顶点着色器的代码给简化为一行。</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        gl_Position</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">projectionMatrix</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">modelViewMatrix</span><span style="color:#F97583;">*</span><span style="color:#B392F0;">vec4</span><span style="color:#E1E4E8;">(position,</span><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        gl_Position</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">projectionMatrix</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">modelViewMatrix</span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">vec4</span><span style="color:#24292E;">(position,</span><span style="color:#005CC5;">1.</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p><code>MVP</code>矩阵变换这个操作基本都是固定的，真正需要的变量是<code>position</code>，对它可以进行各种操作，将其单独作为一个变量<code>p</code>提取出来：</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        vec3 p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> position;</span></span>
<span class="line"><span style="color:#E1E4E8;">        gl_Position</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">projectionMatrix</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">modelViewMatrix</span><span style="color:#F97583;">*</span><span style="color:#B392F0;">vec4</span><span style="color:#E1E4E8;">(p,</span><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        vec3 p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> position;</span></span>
<span class="line"><span style="color:#24292E;">        gl_Position</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">projectionMatrix</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">modelViewMatrix</span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">vec4</span><span style="color:#24292E;">(p,</span><span style="color:#005CC5;">1.</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><h2 id="varying" tabindex="-1">varying <a class="header-anchor" href="#varying" aria-label="Permalink to &quot;varying&quot;">​</a></h2><p>在前文中，经常提到<code>UV</code>，其实，它就存在于顶点着色器中，变量名为<code>uv</code>。然而它是一个<code>attribute</code>变量，并不是<code>uniform</code>，这就意味着它只存在于顶点着色器，而不是在片元着色器内。是否存在一些办法可以将它从一个着色器传递到另一个着色器？</p><p>在前文中，有提到过“变量限定符”这个概念，而其中有一种能够在2个着色器之间传递变量，它就是<code>varying</code>。</p><p>现在顶点着色器顶部声明一个<code>varying</code>变量<code>vUv</code></p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">varying</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">vec2</span><span style="color:#E1E4E8;"> vUv;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">varying</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">vec2</span><span style="color:#24292E;"> vUv;</span></span></code></pre></div><p>在顶点着色器的<code>main</code>函数内部的末尾，将变量<code>uv</code>赋给<code>vUv</code></p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    vUv</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">uv</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    ...</span></span>
<span class="line"><span style="color:#24292E;">    vUv</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">uv</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在片元着色器中的顶部也声明<code>vUv</code></p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">varying</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">vec2</span><span style="color:#E1E4E8;"> vUv;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">varying</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">vec2</span><span style="color:#24292E;"> vUv;</span></span></code></pre></div><p>在片元着色器的<code>main</code>函数内，将<code>vUv</code>赋给<code>uv</code>变量，并且直接输出颜色</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    vec2 uv </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vUv;</span></span>
<span class="line"><span style="color:#E1E4E8;">    gl_FragColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">vec4</span><span style="color:#E1E4E8;">(uv,</span><span style="color:#79B8FF;">0.</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    vec2 uv </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vUv;</span></span>
<span class="line"><span style="color:#24292E;">    gl_FragColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vec4</span><span style="color:#24292E;">(uv,</span><span style="color:#005CC5;">0.</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1.</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,51),t=[c];function r(E,y,i,d,h,F){return a(),n("div",null,t)}const C=s(e,[["render",r]]);export{v as __pageData,C as default};
