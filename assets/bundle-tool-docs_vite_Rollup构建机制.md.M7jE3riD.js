import{_ as s,c as i,o as a,U as n}from"./chunks/framework.qUHj8-gn.js";const l="/assets/rollup-demo-2.Yi8_E6Gi.png",p="/assets/rollup-demo-3.WMtT6T_l.png",e="/assets/rpllup-demo-4.HAtKDtVR.png",u=JSON.parse('{"title":"Rollup构建","description":"","frontmatter":{},"headers":[],"relativePath":"bundle-tool-docs/vite/Rollup构建机制.md","filePath":"bundle-tool-docs/vite/Rollup构建机制.md","lastUpdated":1715491431000}'),t={name:"bundle-tool-docs/vite/Rollup构建机制.md"},h=n(`<h1 id="rollup构建" tabindex="-1">Rollup构建 <a class="header-anchor" href="#rollup构建" aria-label="Permalink to &quot;Rollup构建&quot;">​</a></h1><p>Rollup 的打包过程中，会定义一套完整的构建生命周期，从开始打包到产物输出，中途会经历一些<strong>标志性的阶段</strong>，并且会在不同阶段会自动执行对应的插件钩子函数（Hook）。</p><p>对于Rollup插件来讲，最重要的部分是钩子函数，一方面它定义了插件的执行逻辑，也就是“做什么”；另一方面也声明了插件的作用阶段，即“什么时候做”。</p><h2 id="打包过程" tabindex="-1">打包过程 <a class="header-anchor" href="#打包过程" aria-label="Permalink to &quot;打包过程&quot;">​</a></h2><p>在执行<code>rollup</code>命令之后，在cli中内部的主要逻辑简化如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Build 阶段</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bundle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rollup.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rollup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(inputOptions);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output 阶段</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(outputOptions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bundle.write));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 构建结束</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bundle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>Rollup 内部主要经历了<code>Build</code>和<code>Output</code>这两大阶段</p><p>Build 阶段主要负责创建模块依赖图，初始化各个模块的AST以及模块之间的依赖关系</p><p>假设有这个例子：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// src/index.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./module-a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// src/module-a.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rollup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;rollup&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> util</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;util&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bundle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rollup.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rollup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    input: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./src/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 打印rollup信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(util.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inspect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bundle));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>通过打包之后就可以看到这样的<code>bundle</code>对象信息</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  cache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ast: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;AST 节点信息，具体内容省略&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        code: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;export const a = 1;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        dependencies: [],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/Users/code/rollup-demo/src/data.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 其它属性省略</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ast: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;AST 节点信息，具体内容省略&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        code: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;import { a } from &#39;./data&#39;;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">console.log(a);&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        dependencies: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &#39;/Users/code/rollup-demo/src/data.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/Users/code/rollup-demo/src/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 其它属性省略</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  closed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 挂载后续阶段会执行的方法</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [AsyncFunction: close],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [AsyncFunction: generate],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [AsyncFunction: write]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>从上面的信息中可以看出，目前经过 Build 阶段的 <code>bundle</code> 对象其实没有进行模块的打包，也就是说不会产生打包产物，这个对象的作用在于存储各个模块的内容以及依赖关系，同时暴露<code>generate</code>和<code>write</code>方法，以进入到后续的<code>Output</code>阶段，<strong>write和 generate</strong> 方法唯一区别在于前者打包完产物会写入磁盘，而后者不会。</p><p>所以，真正进行打包的过程会在<code>Output</code>阶段进行，也就是在write和generate方法中进行，因此，<strong>对于一次完整的构建过程而言，Rollup会先进入到Build阶段，解析各个模块的内容以及依赖关系，然后进入到<code>Output</code>阶段，完成打包和输出的过程。</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rollup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;rollup&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> util</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;util&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // build 阶段</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bundle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rollup.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rollup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        input:[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./src/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(util.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inspect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bundle))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // output阶段</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bundle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        format:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;es&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;result&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>得到的打印结果如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  output</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      exports: [],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      facadeModuleId: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/Users/jhinkoo/Desktop/project/bundle-tool/rollup/src/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      isDynamicEntry: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      isEntry: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      isImplicitEntry: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      moduleIds: [Array],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;index&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;chunk&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      dynamicImports: [],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      fileName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      implicitlyLoadedBefore: [],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      importedBindings: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      imports: [],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      modules: [Object: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prototype],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      referencedFiles: [],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      code: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;const add = (a, b) =&gt; a + b;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;let result = add(1,2);</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;console.log(result);</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      map: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      preliminaryFileName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      sourcemapFileName: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="插件类别" tabindex="-1">插件类别 <a class="header-anchor" href="#插件类别" aria-label="Permalink to &quot;插件类别&quot;">​</a></h2><p>实际上，插件的各种Hook可以根据上述的两个阶段分为两类：<code>Build Hook</code> 与 <code>Output Hook</code></p><ul><li><code>Build Hook</code> 即在 build 阶段执行的钩子函数，在这个阶段主要进行模块代码的转换，AST解析以及模块依赖的解析，这个阶段的Hokk对于代码的操作粒度实际上是<strong>模块 单文件</strong>级别的</li><li><code>Output Generation Hook</code> 主要进行代码的打包，对于代码而言，操作粒度一般为 <code>chunk</code> 级别的，也就是一个多个文件打包到一起的产物</li></ul><p>除了根据构建阶段可以将Rollup插件进行分类，根据不同的Hook执行方式也会有不同的分类，主要包括<code>Async</code> <code>Sync</code> <code>Parallel</code> <code>Squential</code> <code>First</code> 这五种。不是说一个Hook就对应了其中一类，而是有可能是多类，不同的类型是可以互相叠加的，<code>Async / Await</code> 是可以搭配三种类型中的任意一种。</p><h3 id="async-sync" tabindex="-1">Async &amp; Sync <a class="header-anchor" href="#async-sync" aria-label="Permalink to &quot;Async &amp; Sync&quot;">​</a></h3><p>分别代表<strong>异步</strong>和<strong>同步</strong>的钩子函数，两者最大的区别在于同步钩子中不能有异步逻辑，而异步钩子里面运行有</p><h3 id="parallel-并行" tabindex="-1">Parallel （并行） <a class="header-anchor" href="#parallel-并行" aria-label="Permalink to &quot;Parallel （并行）&quot;">​</a></h3><p>这里指的是并行的钩子函数，如果有多个插件实现了这个钩子的逻辑，一旦有钩子函数是异步逻辑，则并发执行钩子函数，不会等待当前钩子完成（底层实现用的是<code>Promise.all</code>）</p><p>比如对于<code>Build</code>阶段的<code>buildStart</code>钩子，它的执行时机其实是在构建刚开始的时候，各个插件可以在这个钩子当中做一些状态初始化的操作，这一流程中插件之间的操作并不会相互依赖，也就是可以并发执行，从而提升构建性能。反之，对于需要依赖其他插件处理结果的情况就不适合用<code>Parallel</code>钩子了，比如<code>transform</code></p><h3 id="sequential-串行" tabindex="-1">Sequential（串行） <a class="header-anchor" href="#sequential-串行" aria-label="Permalink to &quot;Sequential（串行）&quot;">​</a></h3><p><strong>Sequential</strong> 指的是串行的钩子函数。这种Hook往往适用于插件之间处理结果相互依赖的情况，前一个插件Hook的返回值作为后续插件的入参，这种情况就需要等待前一个插件执行完Hook，获得其执行结果，然后才能进行下一个插件相应Hook的调用</p><h3 id="first" tabindex="-1">First <a class="header-anchor" href="#first" aria-label="Permalink to &quot;First&quot;">​</a></h3><p>如果有多个插件实现了这个Hook，那么Hook将会依次运行，直到返回一个非null或非undefined的值为止。比较典型的是Hook是<code>resolveId</code>，一旦有插件的resolveId返回了一个路径，将执行后续插件的resolveId逻辑。</p><h2 id="build工作流" tabindex="-1">Build工作流 <a class="header-anchor" href="#build工作流" aria-label="Permalink to &quot;Build工作流&quot;">​</a></h2><p>每个方块代表一个Hook，边框的颜色表示<code>Async</code>和<code>Sync</code>类型，方块的填充颜色可以代表<code>Parallel</code> <code>Sequential</code>和<code>First</code>类型</p><p><img src="`+l+'" alt="image"></p><ul><li>1.首先是<strong>异步串行钩子options</strong>，对配置文件进行转换，得到处理之后的配置对象</li><li>2.然后是<strong>异步并行钩子buildStart</strong>，进行初始化然后，正式开始构建流程</li><li>3.<strong>异步First钩子resolveId</strong>，进行路径解析，从input配置指定的入口文件开始，如果配置了external的文件列表，这这个列表中的文件不参与后面的打包构建流程，直接输入到最后的<strong>BuildEnd</strong></li><li>4.<strong>异步First钩子load</strong>，用于加载模块的内容</li><li>5.<strong>异步串行钩子tranform</strong>，执行所有的transform钩子来对模块内容进行自定义转换，比如babel转译</li><li>6.<strong>异步并行钩子moduleParsed</strong>，拿到了最后的模块内容，开始并行解析模块的内部内容，如果是普通的<code>import</code>语法，则返回到<strong>resolvedId</strong>钩子，如果是动态导入<code>import()</code>函数，则使用<strong>resolveDynamicImport</strong>去解析</li><li>7.所有的import都解析完毕了，Rollup执行<strong>buildEnd</strong>钩子，Build阶段结束</li></ul><p>同时，在流程图的最上面，还有<code>watchChange</code>和<code>closeWatcher</code>这两个Hook，这里其实对应了rollup的<code>watch</code>模式。当你使用<code>rollup --watch</code>指令或者在配置文件配有<code>watch:true</code>属性时，代表开启了Rollup的<code>watch</code>打包模式，这个时候Rollup内部会初始化一个<code>watcher</code>对象，当文件内容发生变化时，<code>watcher</code>会自动触发watchChange钩子执行并对项目进行重新构建。在当前<strong>打包过程结束</strong>时，Rollup会自动清除watcher对象调用<code>closeWatcer</code>钩子。</p><h2 id="output工作流" tabindex="-1">Output工作流 <a class="header-anchor" href="#output工作流" aria-label="Permalink to &quot;Output工作流&quot;">​</a></h2><p><img src="'+p+'" alt="image"></p><ul><li>1.执行所有插件的<code>outputOptions</code>钩子函数，对<code>output</code>配置进行转换</li><li>2.执行<code>renderStart</code>，并发执行renderStart钩子，正式开始打包</li><li>3.并发执行所有插件的<code>banner</code> <code>footer</code> <code>info</code> <code>outro</code>钩子（底层用Promise.all 包裹所有的这四种钩子函数），这四个钩子的功能很简单，就是往打包产物的固定位置（头部和尾部）插入一些自定义的内容，比如协议声明内容，项目介绍等</li><li>4.从入口模块开始扫描，针对动态import语句进行<code>renderDynamicImport</code>钩子，来自定义动态import的内容</li><li>5.对每个即将生成的<code>chunk</code>，执行<code>augmentChunkHash</code>钩子，来决定是否更改chunk的哈希值，在<code>watch</code>模式下即可能会多次打包的场景下，这个钩子比较适用。</li><li>6.如果没有遇到<code>import.meta</code>语句，就进行下一步，否则：对于<code>import.meta.url</code>语句调用<code>resolveFileUrl</code>来自定义url的解析逻辑;对于其他<code>import.meta</code>属性，则调用<code>resolveImportMeta</code>来进行自定义的解析</li><li>7.接着Rollup会生成所有的chunk内容，针对每个chunk会依次调用插件的<code>renderChunk</code>方法进行自定义操作，也就是说，在这里就可以直接操作打包产物了</li><li>8.随后会调用<code>generateBundle</code>钩子，这个钩子的入参里面会包含所有的打包产物信息，包括<code>chunk</code>(打包后的问题)，<code>assets</code>(最终的静态资源文件)。可以在这里删除一些chunk或者assets，最终这些内容将不会作为产物输出，上文也提到了<code>rollup.rollup</code>方法会返回一个<code>bundle</code>对象，这个对象是包含<code>generate</code>和<code>write</code>两个方法，两个方法唯一的区别在于后者会将代码写入到磁盘中，同时触发<code>writeBundle</code>钩子，所以传入所有的打包产物信息，包括 chunk 和 asset ，和<code>generateBundle</code>钩子非常相似，不过需要值得注意的是，这个钩子执行的时候，产物已经输出了，而generateBundle执行的时候产物还没有输出，顺序如下图所示：</li></ul><p><img src="'+e+'" alt="image"></p><ul><li>9.当bundle的clsoe方法被调用的时候，会触发<code>closeBundle</code>钩子，到这里Output阶段正式结束了，如果打包过程中任何阶段出现错误，会触发renderError钩子，然后执行closeBundle钩子结束打包</li></ul>',41),k=[h];function d(r,E,o,c,g,y){return a(),i("div",null,k)}const C=s(t,[["render",d]]);export{u as __pageData,C as default};
