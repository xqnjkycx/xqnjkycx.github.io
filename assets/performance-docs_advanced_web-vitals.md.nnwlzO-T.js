import{_ as s,c as i,o as a,U as n}from"./chunks/framework.qUHj8-gn.js";const l="/assets/fcp.RYIDUFHR.png",t="/assets/lcp.xGKUUUH1.png",p="/assets/cls.9WCQD8_s.png",e="/assets/console指标.nTkZPOPY.png",P=JSON.parse('{"title":"性能优化指标","description":"","frontmatter":{},"headers":[],"relativePath":"performance-docs/advanced/web-vitals.md","filePath":"performance-docs/advanced/web-vitals.md","lastUpdated":1710598269000}'),h={name:"performance-docs/advanced/web-vitals.md"},k=n('<h1 id="性能优化指标" tabindex="-1">性能优化指标 <a class="header-anchor" href="#性能优化指标" aria-label="Permalink to &quot;性能优化指标&quot;">​</a></h1><p>性能优化只是<strong>手段</strong>，优化体验才是<strong>目的</strong>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>改善用户体验和开发体验才是优化的根本目的。</p></div><p>没有指标的前端的优化会存在一些问题：</p><ul><li><strong>目标不准确：</strong> 把别人的优化手段生搬硬套到自己的项目，找不到自己的优化目标</li><li><strong>缺乏量化指标：</strong> 无法评估优化效果，拿不出客观、可量化的指标证明优化效果</li><li><strong>没有改善用户的主观体验：</strong> 优化效果对用户主观体验影响甚微，无法让用户直观地感受到</li><li><strong>欠缺长效化机制：</strong> 无法保证优化效果长期稳定、不出现衰退</li><li><strong>忽视开发体验：</strong> 没有认识到开发体验和用户体验的正相关性</li></ul><h2 id="为什么需要量化指标" tabindex="-1">为什么需要量化指标 <a class="header-anchor" href="#为什么需要量化指标" aria-label="Permalink to &quot;为什么需要量化指标&quot;">​</a></h2><p>没有量化指标的优化是没有说服力的，不了解优化目标的现状更无法实现优化。</p><p>在实施优化时，一个常常陷入的误区是不了解现状，缺乏量化优化效果的监控指标就开始优化。这样的方式往往导致自欺欺人的优化，自以为做了效果显著的改进优化，实际上并没有改善用户体验。</p><p>所以，为了能真正的改善用户体验，需要在开始优化前，就建立量化指标，一方面帮助透彻的理解优化目标的现状，另一方面，也可以用量化指标监控优化前后的变化，评估优化效果。</p><p>这就需要我们能把<strong>主观</strong>的用户体验或开发体验<strong>量化为客观</strong>的数据指标。</p><h2 id="将主观的体验量化为客观指标" tabindex="-1">将主观的体验量化为客观指标 <a class="header-anchor" href="#将主观的体验量化为客观指标" aria-label="Permalink to &quot;将主观的体验量化为客观指标&quot;">​</a></h2><p>以前端页面的加载速度为例，同一个页面，在不同的地理位置，不同的硬件设备上，加载速度都会有不同的表现，给用户的主观体验更是因人而异。</p><p>所以要测量用户对页面的加载速度的主观体验，需要考虑的因素非常多，需要能抹平各种影响因素差异，稳定衡量用户体验的量化手段。</p><p>这里推荐使用开源库的<code>web-vitals</code>获取的页面渲染耗时，交互延迟等指标。</p><p>点击这个可查看👉👉<a href="https://github.com/GoogleChrome/web-vitals" target="_blank" rel="noreferrer">web-vitals</a></p><h2 id="web-vitals指标" tabindex="-1">web-vitals指标 <a class="header-anchor" href="#web-vitals指标" aria-label="Permalink to &quot;web-vitals指标&quot;">​</a></h2><p><code>web-vitals</code>是谷歌的 Chrome 维护团队于 2020 年开源的工具库，它基于统一的浏览器<code>Performance API</code>获取标准化的用户体验指标。</p><p>它主要测量了6项指标，分别是：</p><ul><li>首次内容绘制 <em>First Content Paint</em> <strong>FCP</strong></li><li>最大内容绘制 <em>Largest Contentful Paint</em> <strong>LCP</strong></li><li>首次输入延迟 <em>First Input Delay</em> <strong>FID</strong></li><li>交互到绘制延迟 <em>Interaction to Next Paint</em> <strong>INP</strong></li><li>累积布局偏移 <em>Cumulative Layout Shift</em> <strong>CLS</strong></li><li>第一字节事件 <em>Time to First Byte</em> <strong>TTFB</strong></li></ul><h3 id="fcp" tabindex="-1">FCP <a class="header-anchor" href="#fcp" aria-label="Permalink to &quot;FCP&quot;">​</a></h3><p>FCP测量从页面开始加载到页面中任意部分内容（文本，图像，<code>svg</code>，<code>canvas</code>）完成渲染的时长。</p><p>其值为浮点数，单位是毫秒。FCP值越小表示该指标状况越好，页面渲染的初始内容渲染越快。</p><p>页面中率先出现的文本图像等视觉可见内容，直接决定了用户对页面加载速度的主观体验，所以这一指标选择测量这些内容的渲染耗时，从而量化用户的主观体验。</p><p><strong>注意，FCP测量的是任意部分DOM完成渲染的耗时，而非全部内容进行渲染完成，不等于<code>onLoad</code>事件。</strong></p><p><img src="'+l+'" alt="image"></p><p>如上图所示，FCP指标的值为686.56ms</p><p>按照Chrome官方的推荐标准，FCP指标3个等级的评分分别为：</p><ul><li>优：小于1.8s</li><li>待改进：大于1.8s且小于3s</li><li>差：大于3s</li></ul><h3 id="lcp" tabindex="-1">LCP <a class="header-anchor" href="#lcp" aria-label="Permalink to &quot;LCP&quot;">​</a></h3><p>LCP测量从页面开始加载到可视区域内<strong>尺寸最大</strong>的文字或图像渲染完成的耗时。</p><p>其值为浮点数，单位是毫秒。LCP值越小表示该指标状况越好、最大元素渲染越快。 <img src="'+t+'" alt="image"> 按照Chrome官方的推荐标准，FCP指标3个等级的评分分别为：</p><ul><li>优：小于2.5s</li><li>待改进：大于2.5s且小于4s</li><li>差：大于4s</li></ul><h3 id="fid" tabindex="-1">FID <a class="header-anchor" href="#fid" aria-label="Permalink to &quot;FID&quot;">​</a></h3><p>FID 测量用户首次交互（点击、触摸）后到浏览器开始响应之间的时间间隔。</p><p>其值为浮点数，单位是毫秒。FID值越小表示该指标状况越好，用户首次与页面交互时，浏览器响应的延迟越小。</p><p>这一指标只关注页面中首次交互的原因是因为，首次交互时，页面往往处于尚未完全加载的状态，异步响应数据仍在等待响应、部分JS和CSS仍在执行和渲染的过程中，浏览器的主线程会短暂的处于忙碌状态，往往不能即时响应用户交互。</p><p>第一次交互的延迟长短往往决定了用户对网页流畅度的第一印象，所以这一指标的测量目标，也能量化用户的主观体验。</p><p>FCP指标三个等级的评分为：</p><ul><li>优：小于100ms</li><li>待改进：大于100ms且小于300ms</li><li>差：大于300ms</li></ul><h3 id="inp" tabindex="-1">INP <a class="header-anchor" href="#inp" aria-label="Permalink to &quot;INP&quot;">​</a></h3><p>INP测量用户在页面浏览过程中的所有交互（点击、键盘输入、触摸等）与浏览器渲染响应的整体延迟情况</p><p>其值为浮点数，单位是毫秒。INP值越小表示该指标状况越好，用户的各类交互响应延迟越小。</p><p>与FID只关注首次交互不同，INP会关注用户浏览网页全过程中的<strong>所有</strong>交互，所以web-vitals库中获取INP值的onINP(FCPReportCallback)方法，通常会在页面可视化状态变化或页面卸载时多次触发，综合统计一段时间内的多次交互，按特定算法，计算该时段内的INP指标值。</p><p>INP指标3个等级的评分分别为：</p><ul><li>优：小于200ms</li><li>待改进：大于200ms且小于500ms</li><li>差：大于500ms</li></ul><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3><p>CLS测量页面中所有<strong>意外</strong>布局变化的累计分值。</p><p>其值为浮点数，<strong>无单位</strong>， 值的大小表示意外布局变化的多少和影响范围的大小。</p><p>CLS值的计算类似INP，会统计一段时间内的所有意外布局变化，按特定算法，计算出分值。</p><p>所谓意外布局变化是指 DOM 元素在前后绘制的2帧之间，非用户交互引起DOM元素尺寸、位置的变化。</p><p><img src="'+p+`" alt="image"></p><p>引入<code>web-vitals</code>库后调用<code>onCLS</code>API就能获取CLS的值，同时获取到对应的意外布局变化的具体来源，如下图中sources字段的2个对象就通过DOM元素引用，明确地告诉了引起布局变化的来源，以及变化前后的尺寸位置等详细数据<code>sources[i].currentRect, sources[i].previousRect</code></p><h3 id="ttfb" tabindex="-1">TTFB <a class="header-anchor" href="#ttfb" aria-label="Permalink to &quot;TTFB&quot;">​</a></h3><p>TTFB测量前端页面（Document）的HTTP请求发送后，到接收到第一字节数据响应的耗时，通常包括重定向、DNS查询、服务器响应延迟等耗时。</p><p>其值为浮点数，单位是毫秒。值越小表示该项指标状况越好，页面HTTP响应的耗时越短，也就是页面的加载更快。</p><p>TTFB指标值的大小直接决定着页面初始内容渲染耗时的长短，往往和FCP、LCP指标有明显的相关关系，对用户体验有直接影响，所以web-viatals也将其当做了量化用户体验的指标之一。</p><p>除了可以通过<code>web-vitals</code>库的<code>onTTFBAPI</code>获取，也可以使用Chrome自带的DevTool Network 网络面板计算得出。</p><p>TTFB:</p><ul><li>优：小于800ms</li><li>待改进：大于800ms且小于1800ms</li><li>差：大于1800ms</li></ul><h2 id="在项目中引入web-vitals" tabindex="-1">在项目中引入web-vitals <a class="header-anchor" href="#在项目中引入web-vitals" aria-label="Permalink to &quot;在项目中引入web-vitals&quot;">​</a></h2><p>上面的6个指标都可以通过<code>web-vitals</code>库内置的API方便获取，将<code>web-vitals</code>库集成到用户访问的前端页面 这里通过vue封装为Hook:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { onFCP, onLCP, onFID, onTTFB, onINP, onCLS } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;web-vitals&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useWebvitals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> printWebvitalsData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data111);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FCP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onFCP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(printWebvitalsData);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LCP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onLCP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(printWebvitalsData);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onFID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(printWebvitalsData);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TTFB</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onTTFB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(printWebvitalsData);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> INP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onINP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(printWebvitalsData);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CLS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onCLS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(printWebvitalsData);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    FCP,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    FID,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    LCP,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    TTFB,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    INP,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    CLS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>启动项目就可以在页面中看到这些信息： <img src="`+e+'" alt="image"></p><p>需要特别注意的是：</p><ul><li><code>onFCP</code>,<code>onLCP</code>,<code>onTTFB</code> 均为在页面初始化时自动触发</li><li><code>onFID</code> 是在用户第一次与页面交互时触发</li><li><code>onCLS</code>，<code>onINP</code>则因为要测量页面的全生命周期，往往无固定触发时间点，在实践中通常会在交互停止一段时间后，或页面可视状态变化（例如切换标签页）后多次触发。</li></ul>',65),r=[k];function o(d,c,E,g,F,y){return a(),i("div",null,r)}const C=s(h,[["render",o]]);export{P as __pageData,C as default};
