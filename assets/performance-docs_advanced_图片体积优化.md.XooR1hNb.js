import{_ as s,c as i,o as a,U as t}from"./chunks/framework.qUHj8-gn.js";const E=JSON.parse('{"title":"图片体积优化","description":"","frontmatter":{},"headers":[],"relativePath":"performance-docs/advanced/图片体积优化.md","filePath":"performance-docs/advanced/图片体积优化.md","lastUpdated":1711641779000}'),n={name:"performance-docs/advanced/图片体积优化.md"},p=t(`<h1 id="图片体积优化" tabindex="-1">图片体积优化 <a class="header-anchor" href="#图片体积优化" aria-label="Permalink to &quot;图片体积优化&quot;">​</a></h1><p>据统计，网页中加载的图片类资源，体积中位数是1009KB，请求数量中位数是21个。分别是页面总加载体积2419KB的41.7%，和总请求数量72个的29.5%。</p><p>肉眼可见图片是前端应用绝对的核心内容。</p><p>同时，前端应用的图片类资源也面临着很多痛点，主要是：</p><ul><li>图片体积较大，加载耗时较大</li><li>CDN流量开销比较高：图片资源数量多，体积大，是CDN费用的主要成本 前端应用中图片类资源的加载也直接影响了用户的体验，图片是首次内容绘制<strong>FCP</strong>和最大内容绘制<strong>LCP</strong>指标的测量要素，所以从图片类资源入手优化用户体验，对前端应用不可或缺</li></ul><h2 id="图片格式对比" tabindex="-1">图片格式对比 <a class="header-anchor" href="#图片格式对比" aria-label="Permalink to &quot;图片格式对比&quot;">​</a></h2><p>浏览器平台支持众多的图片格式，分别有不同的特性，这里可以通过对比了解一下基本格式：</p><table><thead><tr><th>格式</th><th>简介和特性</th><th>体积示例</th><th>浏览器兼容性</th></tr></thead><tbody><tr><td><code>jpg</code></td><td>常见广泛的图片格式，体积一般</td><td>158KB</td><td>几乎所有浏览器都支持</td></tr><tr><td><code>png</code></td><td>带有透明通道，支持图片透明，体积较大</td><td>819KB</td><td>几乎所有浏览器都支持</td></tr><tr><td><code>gif</code></td><td>支持自动播放的动态图，体积较大</td><td>432KB</td><td>几乎所有浏览器都支持</td></tr><tr><td><code>svg</code></td><td>矢量图，任意缩放不影响清晰度，本质上是一种标记语言，可以被浏览器解析，视内容体积不定</td><td>---</td><td>Chrome4 以上版本支持</td></tr><tr><td><code>webp</code></td><td>支持动态图片，支持有损压缩和无损压缩，专注于web平台的表现，体积较小</td><td>136KB</td><td>Chrome32 以上版本支持</td></tr><tr><td><code>avif</code></td><td>支持动态图片，压缩率较高，体积较小</td><td>96KB</td><td>96KB Chrome 85 以上版本支持</td></tr></tbody></table><p>从这个表格可以看出：</p><ul><li><strong>传统</strong>图片格式：发明于前期的<code>jpg png gif svg</code>等</li><li><strong>现代</strong>图片格式：近十年发明的<code>webp avif</code>等</li></ul><p>从发展来看：</p><ul><li><strong>体积</strong>：传统格式显著大于现代图片格式。相较于<code>jpg</code>格式，<code>webp</code>格式图片一般能减少10%左右体积，<code>avif</code>格式更是能减少40%以上的文件体积</li><li><strong>特性</strong>：现代格式都能覆盖传统格式的动态图片，无损压缩等功能和特性，传统格式特性较为单一，现代格式支持动态图片，无损压缩等特性更多</li><li><strong>浏览器兼容性</strong>：兼容现代格式的浏览器占比比较少</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果使用新型图片格式，虽然对前端应用图片资源体积大，加载耗时长，CDN开销较高的痛点会有明显优化。但是浏览器的兼容性确实不太放得开～</p></div><h2 id="picture-元素" tabindex="-1"><code>&lt;Picture&gt;</code>元素 <a class="header-anchor" href="#picture-元素" aria-label="Permalink to &quot;\`&lt;Picture&gt;\`元素&quot;">​</a></h2><p><code>&lt;picture&gt;</code>元素允许同时引入多个图片格式的子元素，并根据浏览器的兼容性，按先后顺序，自适应加载其中一个格式的图片，实现所有用户根据自身兼容性，获取到最优图片格式：</p><p>代码示例：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">picture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">source</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image/avif&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> srcset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://cdn.com/image.avif&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">source</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image/webp&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> srcset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://cdn.com/image.webp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://cdn.com/image.jpg&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">picture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在这个例子中，<code>&lt;picture&gt;</code>元素中包含了2个<code>&lt;source&gt;</code>元素和1个<code>&lt;img&gt;</code>元素。</p><p>每个<code>&lt;source&gt;</code>元素都包含一个<code>srcset</code>属性，两处<code>srcset</code>属性分别用了<code>avif,webp</code>格式的图片URL，<code>type</code>属性则是格式对应的MIME类型</p><p>但是这段HTML只会触发<code>avif</code>一个图片的资源的下载</p><p>这是因为，对于<code>&lt;picture&gt;</code>元素，浏览器会按照<strong>从上到下</strong>的顺序检查<code>&lt;source&gt;</code>元素，<strong>加载第一个浏览器兼容的格式</strong>图片，并<strong>忽略</strong>后续的<code>&lt;source&gt;</code>元素和<code>img</code>元素。</p><p>如果浏览器对所有<code>&lt;source&gt;</code>声明的图片格式都不支持，那么它会降级到加载的<code>&lt;img&gt;</code>元素<code>src</code>属性对应<code>jpg</code>格式图片，作为兜底方案</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>&lt;picture&gt;</code>必须声明一个<code>img</code>子元素，否则如果只有<code>source</code>元素，浏览器不会加载<code>source</code>的<code>src</code>属性对应的图片资源</p></div><p>也就是说，即使用户的浏览器既不支持解析<code>avif,webp</code>格式图片，甚至不兼容<code>&lt;picture&gt;</code>元素，浏览器也会<strong>自动降级</strong>到使用<code>&lt;img&gt;</code>元素，确保始终有正确的图片加载</p><p><code>&lt;picture&gt;</code>元素目前经过业界的大量实践证明，可以用于生产环境</p><h2 id="图片cdn" tabindex="-1">图片CDN <a class="header-anchor" href="#图片cdn" aria-label="Permalink to &quot;图片CDN&quot;">​</a></h2><p>图片CDN就是CDN的扩展能力，专用于处理图片类型的各种资源。各大云服务供应商都有提供图片CDN服务，除基础的资源存储外，还附带了多种能力，例如：</p><ul><li>格式转换，体积压缩</li><li>尺寸压缩</li><li>添加水印</li></ul><p>而且这些能力使用起来非常简单，一般只需要更改一下图片的URL参数，就可以实现自动对图片应用相关处理 比如缩放图片：</p><table><thead><tr><th>图片类型</th><th>体积</th><th>URL连接</th></tr></thead><tbody><tr><td>原图</td><td>158kb</td><td><a href="https://examples-1251000004.cos.ap-shanghai.myqcloud.com/sample.jpeg?imageMogr2/format/png" target="_blank" rel="noreferrer">simple-image</a></td></tr><tr><td>宽高缩放为原图的50%</td><td>46.2kb</td><td><a href="https://examples-1251000004.cos.ap-shanghai.myqcloud.com/sample.jpeg?imageMogr2/thumbnail/!50p" target="_blank" rel="noreferrer">sample.jpeg?imageMogr2/thumbnail/!50p</a></td></tr><tr><td>宽高缩放为指定50*50像素</td><td>1.8kb</td><td><a href="https://examples-1251000004.cos.ap-shanghai.myqcloud.com/sample.jpeg?imageMogr2/thumbnail/!50p" target="_blank" rel="noreferrer">sample.jpeg?imageMogr2/thumbnail/!50p</a></td></tr></tbody></table><p>包括在NexSight中也有这样的处理：</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="https://nexsight.cn-wlcb.ufileos.com/g%2F94ebbc586a42017d617abdb30b1eaa05.5848.png?UCloudPublicKey=TOKEN_1812343b-c098-47a6-b544-39d82a63a573&amp;Expires=1711176494&amp;Signature=l2PtW/Sw12hoxoFiFVqNjqRG45k=&amp;iopcmd=convert&amp;dst=webp&amp;Q=70" target="_blank" rel="noreferrer">https://nexsight.cn-wlcb.ufileos.com/g%2F94ebbc586a42017d617abdb30b1eaa05.5848.png?UCloudPublicKey=TOKEN_1812343b-c098-47a6-b544-39d82a63a573&amp;Expires=1711176494&amp;Signature=l2PtW/Sw12hoxoFiFVqNjqRG45k=&amp;iopcmd=convert&amp;dst=webp&amp;Q=70</a></p></div><p>可以看到Q=70就相当于压缩质量为70%。</p><p>为了便于在前端项目中调用图片CDN的处理能力，还可以添加一套辅助函数，例如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 预置一批可选格式值，例如缩放到75%，50%，25%</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ImgFormatOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scaleTo75Percent: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;!75p&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scaleTo50Percent: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;!50p&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scaleTo25Percent: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;!25p&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getImgURL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 图片参数例子：?imageMogr2/thumbnail/!50p</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`http://examples-1251000004.cos.ap-shanghai.myqcloud.com/\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">options) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 如果参数组合复杂，可以改为使用 URLSearchParams API</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // const searchParams = new URLSearchParams()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // searchParams.set(option.key, option.value)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //  return \`\${url}\${searchParams.toString()}\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`?imageMogr2/\`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (options.format) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`format/\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">options</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">format</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (options.thumbnail) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`thumbnail/\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">options</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">thumbnail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // else if  ......</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">params</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>基于这套辅助函数，就可以在前端的代码逻辑中，方便地使用图片CDN的各项能力，代码示例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. 格式转换</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getImgURL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sample.jpeg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {format: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;avif&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// http://example.myqcloud.com/sample.jpeg?imageMogr2/format/avif</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. 裁剪缩略图</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getImgURL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sample.jpeg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {thumbnail: ImgFormatOptions.scaleTo50Percent}) </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// http://example.myqcloud.com/sample.jpeg?imageMogr2/thumbnail/!50p</span></span></code></pre></div><p>如果有条件的话，可以进一步和前端组件结合使用，封装出加载最优图片格式的<code>&lt;PictureImage&gt;</code>组件</p>`,38),e=[p];function l(h,k,d,r,o,c){return a(),i("div",null,e)}const y=s(n,[["render",l]]);export{E as __pageData,y as default};
